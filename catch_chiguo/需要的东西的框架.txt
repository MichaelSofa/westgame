鼠标模拟人类移动函数
move_mouse(x, y)

截取屏幕的函数
numpy_picture = screen_shot()
# 要考虑截取的的同时获取屏幕和窗口的相对位置，方便做坐标转换

游戏坐标和屏幕坐标的转换函数
x_new, y_new = trans_game_to_screen(x, y)
x_new, y_new = trans_screen_to_game(x, y)


获取现在的地图位置的函数
x, y = read_position()
# 可以考虑调用百度ocr读取左上角的坐标
# 或者打开小地图模板匹配标记现在的位置

自动寻路函数
guide_map(x, y)
# 输入现在的地图坐标自动打开小地图，点击目标坐标(点击目标坐标必须加入随机性)
# 想法是从左上角到左下角，再从左下角到左上角，轮回
# 实现方法是 目前坐标和目的地的距离小于某个阈值就切换目的地

战斗状态检测函数
bool check_battle_flag(img)
# 检测是否处于战斗状态, 有现成的代码

自动场景验证函数
scenario_verification(img) 
 -- bool check_verification_status(img)
    # 战斗的时候检调用函数check_verification_status检测是否处于场景验证状态
 -- do_verification(img)
    # 如果check_status返回True 则调用函数do_verification() 判断哪个人物是正面朝向我们(需要切割图像，然后送入tensorfow进行判断)
    # 得到哪个人物正面朝向我们之后 调用移动鼠标函数点击它

自动捕捉(自动战斗)函数
# 战斗的时候检测是否存在持国
catch_chiguo(img)
 -- detect_chiguo(img)
    # 调用yolov7目标检测神经网络进行持国的检测，有现成的代码，检测是否存在持国，如果存在则返回持国的坐标
 -- do_catch(img)
    # 如果存在持国，则根据返回的坐标，用鼠标点击抓取，然后点击持国的位置进行持国的抓取
 -- do_escape(img)
    # 如果不存在持国，则点击逃跑
 -- do_fight(img)
    # (可选实现)自动施法，进行战斗

自动吃药(待具体确定具体的方法)
使用图像识别或者ocr的方式识别人物的血量和蓝量的状态
吃药或者使用特定点的技能进行血量蓝量的回复